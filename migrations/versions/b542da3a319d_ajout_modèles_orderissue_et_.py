"""Ajout modèles OrderIssue et AbsenceRecord pour système qualité et absences

Revision ID: b542da3a319d
Revises: 315e9632a74e
Create Date: 2025-07-05 00:50:23.357776

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b542da3a319d'
down_revision = '315e9632a74e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('absence_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('employee_id', sa.Integer(), nullable=False),
    sa.Column('absence_date', sa.Date(), nullable=False),
    sa.Column('is_full_day', sa.Boolean(), nullable=True),
    sa.Column('start_time', sa.Time(), nullable=True),
    sa.Column('end_time', sa.Time(), nullable=True),
    sa.Column('reason', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_justified', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('order_issues',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('employee_id', sa.Integer(), nullable=False),
    sa.Column('issue_type', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('detected_at', sa.DateTime(), nullable=True),
    sa.Column('detected_by', sa.Integer(), nullable=True),
    sa.Column('is_resolved', sa.Boolean(), nullable=True),
    sa.Column('resolved_at', sa.DateTime(), nullable=True),
    sa.Column('resolution_notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['detected_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('attendance_exceptions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('error_type', sa.String(length=100), nullable=False))
        batch_op.add_column(sa.Column('error_message', sa.Text(), nullable=True))
        batch_op.alter_column('raw_data',
               existing_type=sa.TEXT(),
               nullable=False)
        batch_op.drop_column('error_reason')
    
    # Conversion manuelle pour resolved_by : VARCHAR -> INTEGER
    op.execute("UPDATE attendance_exceptions SET resolved_by = NULL WHERE resolved_by = ''")
    op.execute("ALTER TABLE attendance_exceptions ALTER COLUMN resolved_by TYPE INTEGER USING CASE WHEN resolved_by ~ '^[0-9]+$' THEN resolved_by::integer ELSE NULL END")
    op.create_foreign_key(None, 'attendance_exceptions', 'users', ['resolved_by'], ['id'])

    with op.batch_alter_table('attendance_records', schema=None) as batch_op:
        batch_op.add_column(sa.Column('punch_type', sa.String(length=20), nullable=False))
        batch_op.add_column(sa.Column('source', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('raw_data', sa.Text(), nullable=True))
        batch_op.alter_column('status',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=20),
               existing_nullable=True)
        batch_op.drop_column('processed')
        batch_op.drop_column('zk_uid')
        batch_op.drop_column('punch')
    
    # Conversion manuelle pour zk_user_id : VARCHAR -> INTEGER
    op.execute("UPDATE attendance_records SET zk_user_id = NULL WHERE zk_user_id = '' OR zk_user_id !~ '^[0-9]+$'")
    op.execute("ALTER TABLE attendance_records ALTER COLUMN zk_user_id TYPE INTEGER USING CASE WHEN zk_user_id ~ '^[0-9]+$' THEN zk_user_id::integer ELSE NULL END")
    
    # Création des index après conversion
    op.create_index('idx_attendance_employee_date', 'attendance_records', ['employee_id', 'timestamp'], unique=False)
    op.create_index('idx_attendance_zk_user', 'attendance_records', ['zk_user_id', 'timestamp'], unique=False)

    with op.batch_alter_table('attendance_summaries', schema=None) as batch_op:
        batch_op.add_column(sa.Column('break_hours', sa.Numeric(precision=4, scale=2), nullable=True))
        batch_op.add_column(sa.Column('arrived_at', sa.Time(), nullable=True))
        batch_op.add_column(sa.Column('left_at', sa.Time(), nullable=True))
        batch_op.alter_column('scheduled_hours',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.Numeric(precision=4, scale=2),
               existing_nullable=True)
        batch_op.alter_column('worked_hours',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.Numeric(precision=4, scale=2),
               existing_nullable=True)
        batch_op.alter_column('overtime_hours',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.Numeric(precision=4, scale=2),
               existing_nullable=True)
        batch_op.drop_constraint(batch_op.f('unique_employee_date'), type_='unique')
        batch_op.create_index('idx_attendance_summary_date', ['work_date'], unique=False)
        batch_op.create_unique_constraint('uq_attendance_summary_employee_date', ['employee_id', 'work_date'])
        batch_op.drop_column('scheduled_end')
        batch_op.drop_column('actual_end')
        batch_op.drop_column('scheduled_start')
        batch_op.drop_column('actual_start')

    with op.batch_alter_table('employees', schema=None) as batch_op:
        batch_op.alter_column('role',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.alter_column('salaire_fixe',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=False)
        batch_op.drop_constraint(batch_op.f('employees_zk_user_id_key'), type_='unique')
    
    # Conversion manuelle pour employees.zk_user_id : VARCHAR -> INTEGER
    op.execute("UPDATE employees SET zk_user_id = NULL WHERE zk_user_id = '' OR zk_user_id !~ '^[0-9]+$'")
    op.execute("ALTER TABLE employees ALTER COLUMN zk_user_id TYPE INTEGER USING CASE WHEN zk_user_id ~ '^[0-9]+$' THEN zk_user_id::integer ELSE NULL END")
    op.create_index('ix_employees_zk_user_id', 'employees', ['zk_user_id'], unique=True)

    with op.batch_alter_table('order_employees', schema=None) as batch_op:
        batch_op.drop_column('created_at')

    with op.batch_alter_table('payroll_entries', schema=None) as batch_op:
        batch_op.add_column(sa.Column('overtime_amount', sa.Numeric(precision=10, scale=2), nullable=True))
        batch_op.add_column(sa.Column('notes', sa.Text(), nullable=True))
        batch_op.alter_column('base_salary',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=False)
        batch_op.alter_column('gross_salary',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=False)
        batch_op.alter_column('net_salary',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=False)
        batch_op.drop_constraint(batch_op.f('unique_employee_period'), type_='unique')
        batch_op.create_unique_constraint('uq_payroll_entry_employee_period', ['employee_id', 'period_id'])
        batch_op.drop_column('late_penalty')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('overtime_pay')
        batch_op.drop_column('total_deductions')

    with op.batch_alter_table('payroll_periods', schema=None) as batch_op:
        batch_op.add_column(sa.Column('total_employees', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('total_base_salary', sa.Numeric(precision=12, scale=2), nullable=True))
        batch_op.add_column(sa.Column('total_overtime', sa.Numeric(precision=12, scale=2), nullable=True))
        batch_op.add_column(sa.Column('total_deductions', sa.Numeric(precision=12, scale=2), nullable=True))
        batch_op.add_column(sa.Column('total_net_salary', sa.Numeric(precision=12, scale=2), nullable=True))
        batch_op.create_unique_constraint('uq_payroll_period_year_month', ['year', 'month'])
    
    # Conversion manuelle pour payroll_periods.closed_by : VARCHAR -> INTEGER
    op.execute("UPDATE payroll_periods SET closed_by = NULL WHERE closed_by = '' OR closed_by !~ '^[0-9]+$'")
    op.execute("ALTER TABLE payroll_periods ALTER COLUMN closed_by TYPE INTEGER USING CASE WHEN closed_by ~ '^[0-9]+$' THEN closed_by::integer ELSE NULL END")
    op.create_foreign_key(None, 'payroll_periods', 'users', ['closed_by'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('payroll_periods', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint('uq_payroll_period_year_month', type_='unique')
        batch_op.alter_column('closed_by',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
        batch_op.drop_column('total_net_salary')
        batch_op.drop_column('total_deductions')
        batch_op.drop_column('total_overtime')
        batch_op.drop_column('total_base_salary')
        batch_op.drop_column('total_employees')

    with op.batch_alter_table('payroll_entries', schema=None) as batch_op:
        batch_op.add_column(sa.Column('total_deductions', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('overtime_pay', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('late_penalty', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True))
        batch_op.drop_constraint('uq_payroll_entry_employee_period', type_='unique')
        batch_op.create_unique_constraint(batch_op.f('unique_employee_period'), ['employee_id', 'period_id'], postgresql_nulls_not_distinct=False)
        batch_op.alter_column('net_salary',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=True)
        batch_op.alter_column('gross_salary',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=True)
        batch_op.alter_column('base_salary',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=True)
        batch_op.drop_column('notes')
        batch_op.drop_column('overtime_amount')

    with op.batch_alter_table('order_employees', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))

    with op.batch_alter_table('employees', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_employees_zk_user_id'))
        batch_op.create_unique_constraint(batch_op.f('employees_zk_user_id_key'), ['zk_user_id'], postgresql_nulls_not_distinct=False)
        batch_op.alter_column('zk_user_id',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)
        batch_op.alter_column('salaire_fixe',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=True)
        batch_op.alter_column('role',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)

    with op.batch_alter_table('attendance_summaries', schema=None) as batch_op:
        batch_op.add_column(sa.Column('actual_start', postgresql.TIME(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('scheduled_start', postgresql.TIME(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('actual_end', postgresql.TIME(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('scheduled_end', postgresql.TIME(), autoincrement=False, nullable=True))
        batch_op.drop_constraint('uq_attendance_summary_employee_date', type_='unique')
        batch_op.drop_index('idx_attendance_summary_date')
        batch_op.create_unique_constraint(batch_op.f('unique_employee_date'), ['employee_id', 'work_date'], postgresql_nulls_not_distinct=False)
        batch_op.alter_column('overtime_hours',
               existing_type=sa.Numeric(precision=4, scale=2),
               type_=sa.NUMERIC(precision=5, scale=2),
               existing_nullable=True)
        batch_op.alter_column('worked_hours',
               existing_type=sa.Numeric(precision=4, scale=2),
               type_=sa.NUMERIC(precision=5, scale=2),
               existing_nullable=True)
        batch_op.alter_column('scheduled_hours',
               existing_type=sa.Numeric(precision=4, scale=2),
               type_=sa.NUMERIC(precision=5, scale=2),
               existing_nullable=True)
        batch_op.drop_column('left_at')
        batch_op.drop_column('arrived_at')
        batch_op.drop_column('break_hours')

    with op.batch_alter_table('attendance_records', schema=None) as batch_op:
        batch_op.add_column(sa.Column('punch', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('zk_uid', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('processed', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.drop_index('idx_attendance_zk_user')
        batch_op.drop_index('idx_attendance_employee_date')
        batch_op.alter_column('status',
               existing_type=sa.String(length=20),
               type_=sa.INTEGER(),
               existing_nullable=True)
        batch_op.alter_column('zk_user_id',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
        batch_op.drop_column('raw_data')
        batch_op.drop_column('source')
        batch_op.drop_column('punch_type')

    with op.batch_alter_table('attendance_exceptions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('error_reason', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('resolved_by',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
        batch_op.alter_column('raw_data',
               existing_type=sa.TEXT(),
               nullable=True)
        batch_op.drop_column('error_message')
        batch_op.drop_column('error_type')

    op.drop_table('order_issues')
    op.drop_table('absence_records')
    # ### end Alembic commands ###
