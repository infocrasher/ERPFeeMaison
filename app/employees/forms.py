# -*- coding: utf-8 -*-
"""
app/employees/forms.py
Formulaires pour la gestion des employ√©s
"""

from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, DecimalField, BooleanField, TextAreaField, TimeField, HiddenField, IntegerField, DateField, SubmitField, SelectMultipleField
from wtforms.validators import DataRequired, Length, NumberRange, Optional
from datetime import datetime, date, timedelta

class EmployeeForm(FlaskForm):
    name = StringField('Nom complet', validators=[
        DataRequired(message="Le nom est obligatoire"),
        Length(min=2, max=100, message="Le nom doit contenir entre 2 et 100 caract√®res")
    ])
    
    role = SelectField('R√¥le', choices=[
        ('production', 'Employ√© Production'),
        ('chef_production', 'Chef de Production'),
        ('assistant_production', 'Assistant Production'),
        ('patissier', 'P√¢tissier'),
        ('apprenti', 'Apprenti'),
        ('manager', 'Manager'),
        ('vendeur', 'Vendeur')
    ], validators=[DataRequired(message="Veuillez s√©lectionner un r√¥le")])
    
    salaire_fixe = DecimalField('Salaire fixe (DA)', validators=[
        Optional(),
        NumberRange(min=0, max=999999, message="Le salaire doit √™tre positif")
    ], places=2)
    
    prime = DecimalField('Prime (DA)', validators=[
        Optional(),
        NumberRange(min=0, max=999999, message="La prime doit √™tre positive")
    ], places=2, default=0)
    
    is_active = BooleanField('Employ√© actif', default=True)
    
    notes = TextAreaField('Notes', validators=[
        Optional(),
        Length(max=500, message="Les notes ne doivent pas d√©passer 500 caract√®res")
    ])
    
    # ===== NOUVEAUX CHAMPS RH =====
    zk_user_id = IntegerField('ID Pointeuse', validators=[
        Optional(),
        NumberRange(min=1, message="L'ID pointeuse doit √™tre positif")
    ])
    
    # Cotisations sociales
    is_insured = BooleanField('Employ√© assur√©', default=False)
    insurance_amount = DecimalField('Montant cotisation (DA)', validators=[
        Optional(),
        NumberRange(min=0, max=999999, message="Le montant doit √™tre positif")
    ], places=2, default=0)
    
    # Taux horaire pour heures sup
    hourly_rate = DecimalField('Taux horaire (DA/h)', validators=[
        Optional(),
        NumberRange(min=0, max=9999, message="Le taux horaire doit √™tre positif")
    ], places=2)

class EmployeeSearchForm(FlaskForm):
    search = StringField('Rechercher un employ√©', validators=[Optional()])
    
    role_filter = SelectField('Filtrer par r√¥le', choices=[
        ('', 'Tous les r√¥les'),
        ('production', 'Production'),
        ('chef_production', 'Chef de Production'),
        ('assistant_production', 'Assistant Production'),
        ('patissier', 'P√¢tissier'),
        ('apprenti', 'Apprenti'),
        ('manager', 'Manager'),
        ('vendeur', 'Vendeur')
    ], validators=[Optional()])
    
    status_filter = SelectField('Filtrer par statut', choices=[
        ('', 'Tous'),
        ('active', 'Actifs seulement'),
        ('inactive', 'Inactifs seulement')
    ], validators=[Optional()])


class WorkScheduleForm(FlaskForm):
    """Formulaire pour d√©finir les horaires de travail"""
    
    # Lundi
    monday_start = TimeField('D√©but', validators=[Optional()])
    monday_end = TimeField('Fin', validators=[Optional()])
    monday_active = BooleanField('Travaill√©', default=True)
    
    # Mardi
    tuesday_start = TimeField('D√©but', validators=[Optional()])
    tuesday_end = TimeField('Fin', validators=[Optional()])
    tuesday_active = BooleanField('Travaill√©', default=True)
    
    # Mercredi
    wednesday_start = TimeField('D√©but', validators=[Optional()])
    wednesday_end = TimeField('Fin', validators=[Optional()])
    wednesday_active = BooleanField('Travaill√©', default=True)
    
    # Jeudi
    thursday_start = TimeField('D√©but', validators=[Optional()])
    thursday_end = TimeField('Fin', validators=[Optional()])
    thursday_active = BooleanField('Travaill√©', default=True)
    
    # Vendredi
    friday_start = TimeField('D√©but', validators=[Optional()])
    friday_end = TimeField('Fin', validators=[Optional()])
    friday_active = BooleanField('Travaill√©', default=True)
    
    # Samedi
    saturday_start = TimeField('D√©but', validators=[Optional()])
    saturday_end = TimeField('Fin', validators=[Optional()])
    saturday_active = BooleanField('Travaill√©', default=False)
    
    # Dimanche
    sunday_start = TimeField('D√©but', validators=[Optional()])
    sunday_end = TimeField('Fin', validators=[Optional()])
    sunday_active = BooleanField('Travaill√©', default=False)
    
    def populate_from_schedule(self, schedule_dict):
        """Remplit le formulaire depuis un dictionnaire d'horaires"""
        days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        day_names = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche']
        
        for i, day in enumerate(days):
            day_name = day_names[i]
            if day_name in schedule_dict:
                day_schedule = schedule_dict[day_name]
                if day_schedule.get('active', False):
                    setattr(self, f'{day}_active', True)
                    if 'start' in day_schedule:
                        from datetime import time
                        start_time = time.fromisoformat(day_schedule['start'])
                        setattr(self, f'{day}_start', start_time)
                    if 'end' in day_schedule:
                        from datetime import time
                        end_time = time.fromisoformat(day_schedule['end'])
                        setattr(self, f'{day}_end', end_time)
    
    def get_schedule_dict(self):
        """Convertit le formulaire en dictionnaire d'horaires"""
        days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        day_names = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche']
        
        schedule = {}
        for i, day in enumerate(days):
            day_name = day_names[i]
            active = getattr(self, f'{day}_active').data
            if active:
                start_time = getattr(self, f'{day}_start').data
                end_time = getattr(self, f'{day}_end').data
                if start_time and end_time:
                    schedule[day_name] = {
                        'active': True,
                        'start': start_time.strftime('%H:%M'),
                        'end': end_time.strftime('%H:%M')
                    }
        return schedule


# üÜï NOUVEAU FORMULAIRE POUR ANALYTICS

class AnalyticsPeriodForm(FlaskForm):
    """Formulaire pour s√©lectionner la p√©riode d'analyse"""
    
    period_type = SelectField('P√©riode d\'analyse', choices=[
        ('week', 'Semaine derni√®re'),
        ('month', 'Mois dernier'),
        ('quarter', 'Trimestre dernier'),
        ('semester', 'Semestre dernier'),
        ('year', 'Ann√©e derni√®re'),
        ('custom', 'P√©riode personnalis√©e')
    ], default='quarter', validators=[DataRequired()])
    
    # Pour p√©riode personnalis√©e
    start_date = DateField('Date de d√©but', validators=[Optional()])
    end_date = DateField('Date de fin', validators=[Optional()])
    
    def get_date_range(self):
        """Retourne les dates de d√©but et fin selon le type de p√©riode"""
        today = date.today()
        
        if self.period_type.data == 'week':
            # Semaine derni√®re (lundi √† dimanche)
            days_since_monday = today.weekday()
            last_monday = today - timedelta(days=days_since_monday + 7)
            last_sunday = last_monday + timedelta(days=6)
            return last_monday, last_sunday
            
        elif self.period_type.data == 'month':
            # Mois dernier
            if today.month == 1:
                start_date = date(today.year - 1, 12, 1)
                end_date = date(today.year, 1, 1) - timedelta(days=1)
            else:
                start_date = date(today.year, today.month - 1, 1)
                if today.month == 2:
                    end_date = date(today.year, today.month, 1) - timedelta(days=1)
                else:
                    end_date = date(today.year, today.month, 1) - timedelta(days=1)
            return start_date, end_date
            
        elif self.period_type.data == 'quarter':
            # Trimestre dernier (3 mois)
            end_date = today
            start_date = today - timedelta(days=90)
            return start_date, end_date
            
        elif self.period_type.data == 'semester':
            # Semestre dernier (6 mois)
            end_date = today
            start_date = today - timedelta(days=180)
            return start_date, end_date
            
        elif self.period_type.data == 'year':
            # Ann√©e derni√®re
            start_date = date(today.year - 1, 1, 1)
            end_date = date(today.year - 1, 12, 31)
            return start_date, end_date
            
        elif self.period_type.data == 'custom':
            # P√©riode personnalis√©e
            if self.start_date.data and self.end_date.data:
                return self.start_date.data, self.end_date.data
            else:
                # Par d√©faut : 3 derniers mois
                end_date = today
                start_date = today - timedelta(days=90)
                return start_date, end_date
        
        # Par d√©faut : 3 derniers mois
        end_date = today
        start_date = today - timedelta(days=90)
        return start_date, end_date


# üÜï FORMULAIRES POUR QUALIT√â ET ABSENCES

class OrderIssueForm(FlaskForm):
    """Formulaire pour signaler un probl√®me sur une commande"""
    
    employee_id = SelectField('Employ√© concern√©', choices=[], validators=[DataRequired()])
    
    issue_type = SelectField('Type de probl√®me', choices=[
        ('cuisson_incorrecte', 'Cuisson insuffisante/excessive'),
        ('forme_incorrecte', 'Forme/pr√©sentation incorrecte'),
        ('quantite_incorrecte', 'Quantit√© incorrecte'),
        ('ingredient_manquant', 'Ingr√©dient manquant'),
        ('emballage_defaillant', 'Emballage d√©faillant'),
        ('autre', 'Autre')
    ], validators=[DataRequired()])
    
    description = TextAreaField('Description du probl√®me', validators=[Optional()])
    submit = SubmitField('Signaler le Probl√®me')


class AbsenceRecordForm(FlaskForm):
    """Formulaire pour enregistrer une absence"""
    
    absence_date = DateField('Date d\'absence', validators=[DataRequired()])
    
    is_full_day = BooleanField('Journ√©e compl√®te', default=True)
    start_time = StringField('Heure de d√©but', validators=[Optional()], default='08:00')
    end_time = StringField('Heure de fin', validators=[Optional()], default='17:00')
    
    reason = SelectField('Motif', choices=[
        ('maladie', 'Maladie'),
        ('conge_autorise', 'Cong√© autoris√©'),
        ('absence_personnelle', 'Absence personnelle'),
        ('retard', 'Retard'),
        ('autre', 'Autre')
    ], validators=[DataRequired()])
    
    description = TextAreaField('Description/Justification', validators=[Optional()])
    is_justified = BooleanField('Absence justifi√©e', default=False)

class PayrollPeriodForm(FlaskForm):
    """Formulaire pour s√©lectionner une p√©riode de paie"""
    
    month = SelectField('Mois', choices=[
        ('1', 'Janvier'), ('2', 'F√©vrier'), ('3', 'Mars'), ('4', 'Avril'),
        ('5', 'Mai'), ('6', 'Juin'), ('7', 'Juillet'), ('8', 'Ao√ªt'),
        ('9', 'Septembre'), ('10', 'Octobre'), ('11', 'Novembre'), ('12', 'D√©cembre')
    ], validators=[DataRequired()])
    
    year = SelectField('Ann√©e', choices=[], validators=[DataRequired()])
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # G√©n√©rer les ann√©es (ann√©e actuelle ¬± 2 ans)
        from datetime import datetime
        current_year = datetime.now().year
        year_choices = [(str(year), str(year)) for year in range(current_year - 2, current_year + 3)]
        self.year.choices = year_choices
        
        # Valeurs par d√©faut
        if not self.month.data:
            self.month.data = str(datetime.now().month)
        if not self.year.data:
            self.year.data = str(current_year)

class WorkHoursForm(FlaskForm):
    """Formulaire pour saisir les heures de travail d'un employ√©"""
    
    employee_id = SelectField('Employ√©', choices=[], validators=[DataRequired()])
    period_month = IntegerField('Mois', validators=[DataRequired(), NumberRange(min=1, max=12)])
    period_year = IntegerField('Ann√©e', validators=[DataRequired(), NumberRange(min=2020, max=2030)])
    
    # Heures de travail
    regular_hours = DecimalField('Heures normales', validators=[DataRequired(), NumberRange(min=0, max=300)], 
                                places=2, default=0)
    overtime_hours = DecimalField('Heures suppl√©mentaires', validators=[Optional(), NumberRange(min=0, max=100)], 
                                 places=2, default=0)
    
    # Absences
    sick_days = IntegerField('Jours maladie', validators=[Optional(), NumberRange(min=0, max=31)], default=0)
    vacation_days = IntegerField('Jours cong√©', validators=[Optional(), NumberRange(min=0, max=31)], default=0)
    other_absences = IntegerField('Autres absences', validators=[Optional(), NumberRange(min=0, max=31)], default=0)
    
    # Primes et d√©ductions
    performance_bonus = DecimalField('Prime performance', validators=[Optional(), NumberRange(min=0)], 
                                    places=2, default=0)
    transport_allowance = DecimalField('Indemnit√© transport', validators=[Optional(), NumberRange(min=0)], 
                                      places=2, default=0)
    meal_allowance = DecimalField('Indemnit√© repas', validators=[Optional(), NumberRange(min=0)], 
                                 places=2, default=0)
    
    # D√©ductions
    advance_deduction = DecimalField('Avance sur salaire', validators=[Optional(), NumberRange(min=0)], 
                                    places=2, default=0)
    other_deductions = DecimalField('Autres d√©ductions', validators=[Optional(), NumberRange(min=0)], 
                                   places=2, default=0)
    
    notes = TextAreaField('Notes', validators=[Optional()])
    
    submit = SubmitField('Enregistrer les Heures')

class PayrollCalculationForm(FlaskForm):
    """Formulaire pour calculer et valider la paie"""
    
    employee_id = SelectField('Employ√©', choices=[], validators=[DataRequired()])
    period_month = IntegerField('Mois', validators=[DataRequired()])
    period_year = IntegerField('Ann√©e', validators=[DataRequired()])
    
    # Calculs automatiques (affichage seulement)
    base_salary = DecimalField('Salaire de base', validators=[DataRequired()], places=2)
    overtime_amount = DecimalField('Montant heures sup.', validators=[Optional()], places=2, default=0)
    total_bonuses = DecimalField('Total primes', validators=[Optional()], places=2, default=0)
    total_deductions = DecimalField('Total d√©ductions', validators=[Optional()], places=2, default=0)
    
    # Charges sociales
    social_security_rate = DecimalField('Taux s√©cu. sociale (%)', validators=[DataRequired()], 
                                       places=2, default=9.0)
    unemployment_rate = DecimalField('Taux ch√¥mage (%)', validators=[DataRequired()], 
                                    places=2, default=1.5)
    retirement_rate = DecimalField('Taux retraite (%)', validators=[DataRequired()], 
                                  places=2, default=7.0)
    
    # R√©sultats
    gross_salary = DecimalField('Salaire brut', validators=[DataRequired()], places=2)
    total_charges = DecimalField('Total charges', validators=[DataRequired()], places=2)
    net_salary = DecimalField('Salaire net', validators=[DataRequired()], places=2)
    
    # Validation
    is_validated = BooleanField('Valider cette paie')
    validation_notes = TextAreaField('Notes de validation', validators=[Optional()])
    
    submit = SubmitField('Calculer et Valider')

class PayslipGenerationForm(FlaskForm):
    """Formulaire pour g√©n√©rer les bulletins de paie"""
    
    period_month = SelectField('Mois', choices=[
        ('1', 'Janvier'), ('2', 'F√©vrier'), ('3', 'Mars'), ('4', 'Avril'),
        ('5', 'Mai'), ('6', 'Juin'), ('7', 'Juillet'), ('8', 'Ao√ªt'),
        ('9', 'Septembre'), ('10', 'Octobre'), ('11', 'Novembre'), ('12', 'D√©cembre')
    ], validators=[DataRequired()])
    
    period_year = SelectField('Ann√©e', choices=[], validators=[DataRequired()])
    
    # Options de g√©n√©ration
    employee_ids = SelectMultipleField('Employ√©s (laisser vide pour tous)', choices=[])
    include_inactive = BooleanField('Inclure employ√©s inactifs', default=False)
    
    # Format de sortie
    output_format = SelectField('Format', choices=[
        ('pdf', 'PDF'),
        ('excel', 'Excel'),
        ('both', 'PDF + Excel')
    ], validators=[DataRequired()], default='pdf')
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # G√©n√©rer les ann√©es
        from datetime import datetime
        current_year = datetime.now().year
        year_choices = [(str(year), str(year)) for year in range(current_year - 2, current_year + 3)]
        self.period_year.choices = year_choices
        
        # Valeurs par d√©faut
        if not self.period_month.data:
            self.period_month.data = str(datetime.now().month)
        if not self.period_year.data:
            self.period_year.data = str(current_year)
    
    submit = SubmitField('G√©n√©rer les Bulletins')
